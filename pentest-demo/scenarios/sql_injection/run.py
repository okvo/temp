import sqlite3

DB_SCHEMA = """
CREATE TABLE users (id INTEGER PRIMARY KEY AUTOINCREMENT, username TEXT, email TEXT);
"""


def init_db(conn):
    conn.executescript(DB_SCHEMA)
    conn.execute("INSERT INTO users (username, email) VALUES (?, ?)", ("alice", "alice@example.local"))
    conn.execute("INSERT INTO users (username, email) VALUES (?, ?)", ("bob", "bob@example.local"))
    conn.commit()


# Vulnerable pattern: string concatenation into SQL query (for educational demo only)
def search_users_vuln(conn, query):
    # VULN: concatenating untrusted input into SQL
    sql = f"SELECT id, username, email FROM users WHERE username LIKE '%{query}%';"
    cur = conn.execute(sql)
    return cur.fetchall()


# Safe pattern: parameterized query
def search_users_safe(conn, query):
    cur = conn.execute("SELECT id, username, email FROM users WHERE username LIKE ?", (f"%{query}%",))
    return cur.fetchall()


def run(safe_mode=True):
    conn = sqlite3.connect(":memory:")
    init_db(conn)
    q = input("Enter username search term: ")
    if safe_mode:
        print("Running SAFE search (parameterized)")
        rows = search_users_safe(conn, q)
    else:
        print("Running VULNERABLE search (demonstration only)")
        rows = search_users_vuln(conn, q)
    for r in rows:
        print(r)
