from scenarios.xss_flusk.run import app, NOTES
import pytest

@pytest.fixture
def client():
    return app.test_client()

def test_safe_route_escapes(client):
    NOTES["1"] = "<script>alert('x')</script>"
    rv = client.get("/note/1/safe")
    assert b"<script>alert" not in rv.data  # content must be escaped

def test_vuln_route_reflects(client):
    NOTES["1"] = "<b>bold</b>"
    rv = client.get("/note/1/vuln")
    assert b"<b>bold</b>" in rv.data

def test_dollar_paren_uname():
    payload = "test_$(uname).py"
    # raw payload must be present literally
    assert "$(uname)" in payload
    assert payload.startswith("test_$(")
    assert payload.endswith(").py")

def test_backtick_uname():
    payload = "test_`uname`.py"
    assert "`uname`" in payload
    assert payload.startswith("test_`")
    assert payload.endswith("`.py")

def test_semicolon_uname():
    payload = "test_;uname;.py"
    assert ";uname;" in payload
    assert payload.count(";") >= 2

def test_pipe_uname():
    payload = "test_||uname||.py"
    assert "||uname||" in payload
    assert payload.count("|") >= 4

def test_space_filename_original():
    payload = "test.py id test.py"
    assert payload == "test.py id test.py"

"""
Collaborator OAST tests.
These tests generate outbound HTTP requests to the collaborator service.
Run them only if you control the collaborator endpoint and have permission.
"""

import subprocess
import time

COLLAB = "zknme3uezw6u3xu632h36vowxn3er9fy.oastify.com"


def _curl(url: str, *args) -> int:
    """
    Helper: run curl with given args against url, return returncode.
    """
    cmd = ["curl", "-s", "-o", "/dev/null", "-w", "%{http_code}"] + list(args) + [url]
    result = subprocess.run(cmd, capture_output=True, text=True, timeout=20)
    return result.returncode


def test_collaborator_get():
    token = str(int(time.time()))
    url = f"http://{COLLAB}/probe?tok={token}"
    assert _curl(url) == 0


def test_collaborator_post():
    token = str(int(time.time()))
    url = f"http://{COLLAB}/submit?tok={token}"
    payload = f"action=test&token={token}"
    assert _curl(url, "-X", "POST", "-d", payload) == 0


def test_collaborator_header():
    token = str(int(time.time()))
    url = f"http://{COLLAB}/header"
    header = f"X-Test-Token: {token}"
    assert _curl(url, "-H", header) == 0


def test_collaborator_useragent():
    token = str(int(time.time()))
    url = f"http://{COLLAB}/ua"
    ua = f"oast-test-agent/{token}"
    assert _curl(url, "-A", ua) == 0


def test_collaborator_redirect():
    token = str(int(time.time()))
    url = f"http://{COLLAB}/maybe-redirect?tok={token}"
    assert _curl(url, "-L") == 0
