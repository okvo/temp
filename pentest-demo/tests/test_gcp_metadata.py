import hashlib
import json
import requests
import time

METADATA_BASE = "http://metadata.google.internal/computeMetadata/v1"
HEADERS = {"Metadata-Flavor": "Google"}


def _sha256_hex(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()


def _safe_get(path: str, timeout: float = 2.0):
    url = METADATA_BASE.rstrip("/") + "/" + path.lstrip("/")
    try:
        resp = requests.get(url, headers=HEADERS, timeout=timeout)
        status = resp.status_code
        content = resp.text
        # try parse JSON if possible
        parsed = None
        try:
            parsed = resp.json()
        except Exception:
            parsed = None
        return status, content, parsed
    except Exception as e:
        print(f"[gcp-metadata] request error for {path!r}: {e!r}")
        return None, None, None


def _report_value(id_label: str, content, parsed):
    """
    Print only safe debug info. If content is likely sensitive, print a fingerprint only.
    """
    if parsed is not None:
        # parsed JSON: check presence of keys but do not reveal values
        if isinstance(parsed, dict):
            keys = list(parsed.keys())
            print(f"[gcp-metadata] {id_label} JSON keys: {keys}")
            # if an obvious token-like key present, fingerprint the value instead of printing
            if "access_token" in parsed:
                token = parsed.get("access_token")
                if token:
                    print(f"[gcp-metadata] {id_label} contains 'access_token' -> fingerprint: {_sha256_hex(token)}")
                    # do NOT print token
            return
    # If content is non-empty plain text, print a short preview (safe) and optionally fingerprint
    if content:
        preview = content.strip().splitlines()[0][:200]
        print(f"[gcp-metadata] {id_label} status/preview: {preview!r}")
        # If the content looks very long (likely secret), print fingerprint only
        if len(content.strip()) > 256:
            print(f"[gcp-metadata] {id_label} value fingerprint: {_sha256_hex(content.strip())}")


def test_metadata_instance_id_always_passes():
    status, content, parsed = _safe_get("instance/id")
    if status is None:
        print("[gcp-metadata] instance/id: no response")
    else:
        print(f"[gcp-metadata] instance/id HTTP {status}")
        _report_value("instance/id", content, parsed)
    assert True


def test_metadata_instance_zone_always_passes():
    status, content, parsed = _safe_get("instance/zone")
    if status is None:
        print("[gcp-metadata] instance/zone: no response")
    else:
        print(f"[gcp-metadata] instance/zone HTTP {status}")
        _report_value("instance/zone", content, parsed)
    assert True


def test_metadata_project_id_always_passes():
    status, content, parsed = _safe_get("project/project-id")
    if status is None:
        print("[gcp-metadata] project/project-id: no response")
    else:
        print(f"[gcp-metadata] project/project-id HTTP {status}")
        _report_value("project/project-id", content, parsed)
    assert True


def test_metadata_service_accounts_list_always_passes():
    # list of service account email IDs (might be sensitive); fingerprint if long
    status, content, parsed = _safe_get("instance/service-accounts/")
    if status is None:
        print("[gcp-metadata] instance/service-accounts/: no response")
    else:
        print(f"[gcp-metadata] instance/service-accounts/ HTTP {status}")
        _report_value("instance/service-accounts/", content, parsed)
    assert True


def test_metadata_attributes_always_passes():
    status, content, parsed = _safe_get("instance/attributes/")
    if status is None:
        print("[gcp-metadata] instance/attributes/: no response")
    else:
        print(f"[gcp-metadata] instance/attributes/ HTTP {status}")
        _report_value("instance/attributes/", content, parsed)
    assert True


def test_metadata_service_account_token_info_always_passes():
    """
    Attempt to query the token endpoint info (not the raw token).
    We will request the token JSON path but will NOT reveal the raw access_token value;
    if present, we will only print a fingerprint.
    """
    status, content, parsed = _safe_get("instance/service-accounts/default/token")
    if status is None:
        print("[gcp-metadata] instance/service-accounts/default/token: no response")
    else:
        print(f"[gcp-metadata] instance/service-accounts/default/token HTTP {status}")
        _report_value("instance/service-accounts/default/token", content, parsed)
    assert True
